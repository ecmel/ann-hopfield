/*
 * MainForm.java
 *
 * Created on April 10, 2006, 11:52 PM
 */

package hopfield;

import java.awt.Component;
import java.text.DecimalFormat;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JProgressBar;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingWorker;
import javax.swing.UIManager;



/**
 *
 * @author  Ecmel Ercan
 */
public class MainForm extends javax.swing.JFrame {
    
    public MainForm() {
        initComponents();   
                
        JComponent [][] gridBoxes = {
            { gridA0, gridA1, gridA2, gridA3, gridA4, gridA5, gridA6, gridA7, gridA8, gridA9, gridB0, gridB1, gridB2, gridB3, gridB4, gridB5, gridB6, gridB7, gridB8, gridB9 },
            { cbA0, cbA1, cbA2, cbA3, cbA4, cbA5, cbA6, cbA7, cbA8, cbA9, cbB0, cbB1, cbB2, cbB3, cbB4, cbB5, cbB6, cbB7, cbB8, cbB9 },
            { pbA0, pbA1, pbA2, pbA3, pbA4, pbA5, pbA6, pbA7, pbA8, pbA9, pbB0, pbB1, pbB2, pbB3, pbB4, pbB5, pbB6, pbB7, pbB8, pbB9}
        };
        this.gridBoxes = gridBoxes;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnVerA = new javax.swing.JPanel();
        gridA0 = new MGrid(new int[] {-1,-1,1,1,1,1,-1,-1,-1,1,1,1,1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,-1,1,1,1,1,-1,-1} );
        gridA1 = new MGrid(new int[] {-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,1,1,1,-1,-1,-1,-1,1,1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,-1});
        gridA2 = new MGrid(new int[] {-1,-1,1,1,1,1,-1,-1,-1,1,1,1,1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,-1});
        gridA3 = new MGrid(new int[] {-1,-1,1,1,1,1,-1,-1,-1,1,1,1,1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,1,1,1,-1,-1,-1,-1,-1,1,1,1,-1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,-1,1,1,1,1,-1,-1});
        gridA4 = new MGrid(new int[] {-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,1,1,-1,-1,-1,1,1,-1,1,1,-1,-1,-1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1});
        gridA5 = new MGrid(new int[] {-1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,-1,-1,-1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,-1,1,1,1,1,-1,-1});
        gridA6 = new MGrid(new int[] {-1,-1,1,1,1,1,-1,-1,-1,1,1,1,1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,-1,-1,-1,1,1,1,1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,-1,1,1,1,1,-1,-1});
        gridA7 = new MGrid(new int[] {-1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1});
        gridA8 = new MGrid(new int[] {-1,-1,1,1,1,1,-1,-1,-1,1,1,1,1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,-1,1,1,1,1,-1,-1,-1,1,1,1,1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,-1,1,1,1,1,-1,-1});
        gridA9 = new MGrid(new int[] {-1,-1,1,1,1,1,-1,-1,-1,1,1,1,1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,-1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,-1,1,1,1,1,-1,-1});
        cbA0 = new javax.swing.JCheckBox();
        cbA1 = new javax.swing.JCheckBox();
        cbA2 = new javax.swing.JCheckBox();
        cbA3 = new javax.swing.JCheckBox();
        cbA4 = new javax.swing.JCheckBox();
        cbA5 = new javax.swing.JCheckBox();
        cbA6 = new javax.swing.JCheckBox();
        cbA7 = new javax.swing.JCheckBox();
        cbA8 = new javax.swing.JCheckBox();
        cbA9 = new javax.swing.JCheckBox();
        pnVerAButtons = new javax.swing.JPanel();
        btSelectAllA = new javax.swing.JButton();
        btSelectNoneA = new javax.swing.JButton();
        pnVerB = new javax.swing.JPanel();
        gridB0 = new MGrid(new int[] {-1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,-1});
        gridB1 = new MGrid(new int[] {-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1});
        gridB2 = new MGrid(new int[] {-1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,-1});
        gridB3 = new MGrid(new int[] {-1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,-1});
        gridB4 = new MGrid(new int[] {-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1});
        gridB5 = new MGrid(new int[] {-1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,-1});
        gridB6 = new MGrid(new int[] {-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,-1});
        gridB7 = new MGrid(new int[] {-1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1});
        gridB8 = new MGrid(new int[] {-1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,-1});
        gridB9 = new MGrid(new int[] {-1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1});
        cbB0 = new javax.swing.JCheckBox();
        cbB1 = new javax.swing.JCheckBox();
        cbB2 = new javax.swing.JCheckBox();
        cbB3 = new javax.swing.JCheckBox();
        cbB4 = new javax.swing.JCheckBox();
        cbB5 = new javax.swing.JCheckBox();
        cbB6 = new javax.swing.JCheckBox();
        cbB7 = new javax.swing.JCheckBox();
        cbB8 = new javax.swing.JCheckBox();
        cbB9 = new javax.swing.JCheckBox();
        pnVerBButtons = new javax.swing.JPanel();
        btSelectAllB = new javax.swing.JButton();
        btSelectNoneB = new javax.swing.JButton();
        pnTrainPatterns = new javax.swing.JPanel();
        spMaxLabel = new javax.swing.JLabel();
        spMax = new javax.swing.JSpinner();
        cbHiddenLabel = new javax.swing.JLabel();
        cbHidden = new javax.swing.JComboBox();
        cbLearnRateLabel = new javax.swing.JLabel();
        cbLearnRate = new javax.swing.JComboBox();
        btTrain = new javax.swing.JButton();
        btTrainStop = new javax.swing.JButton();
        lbIter = new javax.swing.JLabel();
        pbIter = new javax.swing.JProgressBar();
        lbTrain = new javax.swing.JLabel();
        lbErr = new javax.swing.JLabel();
        lbTime = new javax.swing.JLabel();
        iterLabel = new javax.swing.JLabel();
        patternsLabel = new javax.swing.JLabel();
        errorLabel = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        pnInputPattern = new javax.swing.JPanel();
        inputGrid = new hopfield.MGrid();
        noiseLabel = new javax.swing.JLabel();
        cbNoise = new javax.swing.JComboBox();
        btAddNoise = new javax.swing.JButton();
        btRecall = new javax.swing.JButton();
        btSave = new javax.swing.JButton();
        btClearGrid = new javax.swing.JButton();
        pnRecalledPattern = new javax.swing.JPanel();
        recallGrid = new hopfield.MGrid();
        btClearGrid2 = new javax.swing.JButton();
        statPanel = new javax.swing.JPanel();
        pbLabelA = new javax.swing.JLabel();
        pbLabelB = new javax.swing.JLabel();
        pbLabel0 = new javax.swing.JLabel();
        pbLabel1 = new javax.swing.JLabel();
        pbLabel2 = new javax.swing.JLabel();
        pbLabel3 = new javax.swing.JLabel();
        pbLabel4 = new javax.swing.JLabel();
        pbLabel5 = new javax.swing.JLabel();
        pbLabel6 = new javax.swing.JLabel();
        pbLabel7 = new javax.swing.JLabel();
        pbLabel8 = new javax.swing.JLabel();
        pbLabel9 = new javax.swing.JLabel();
        pbA0 = new javax.swing.JProgressBar();
        pbA1 = new javax.swing.JProgressBar();
        pbA2 = new javax.swing.JProgressBar();
        pbA3 = new javax.swing.JProgressBar();
        pbA4 = new javax.swing.JProgressBar();
        pbA5 = new javax.swing.JProgressBar();
        pbA6 = new javax.swing.JProgressBar();
        pbA7 = new javax.swing.JProgressBar();
        pbA8 = new javax.swing.JProgressBar();
        pbA9 = new javax.swing.JProgressBar();
        pbB0 = new javax.swing.JProgressBar();
        pbB1 = new javax.swing.JProgressBar();
        pbB2 = new javax.swing.JProgressBar();
        pbB3 = new javax.swing.JProgressBar();
        pbB4 = new javax.swing.JProgressBar();
        pbB5 = new javax.swing.JProgressBar();
        pbB6 = new javax.swing.JProgressBar();
        pbB7 = new javax.swing.JProgressBar();
        pbB8 = new javax.swing.JProgressBar();
        pbB9 = new javax.swing.JProgressBar();
        btDefault = new javax.swing.JButton();
        btHelp = new javax.swing.JButton();
        btExit = new javax.swing.JButton();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hopfield");
        setLocationByPlatform(true);
        setResizable(false);
        pnVerA.setLayout(new java.awt.GridBagLayout());

        pnVerA.setBorder(javax.swing.BorderFactory.createTitledBorder("Patterns Version A"));
        gridA0.setMaximumSize(new java.awt.Dimension(56, 70));
        gridA0.setMinimumSize(new java.awt.Dimension(56, 70));
        gridA0.setPreferredSize(new java.awt.Dimension(56, 70));
        gridA0.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gridA0MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout gridA0Layout = new javax.swing.GroupLayout(gridA0);
        gridA0.setLayout(gridA0Layout);
        gridA0Layout.setHorizontalGroup(
            gridA0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
        );
        gridA0Layout.setVerticalGroup(
            gridA0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 68, Short.MAX_VALUE)
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 2, 3);
        pnVerA.add(gridA0, gridBagConstraints);

        gridA1.setMaximumSize(new java.awt.Dimension(56, 70));
        gridA1.setMinimumSize(new java.awt.Dimension(56, 70));
        gridA1.setPreferredSize(new java.awt.Dimension(56, 70));
        gridA1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gridA0MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout gridA1Layout = new javax.swing.GroupLayout(gridA1);
        gridA1.setLayout(gridA1Layout);
        gridA1Layout.setHorizontalGroup(
            gridA1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
        );
        gridA1Layout.setVerticalGroup(
            gridA1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 68, Short.MAX_VALUE)
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 2, 3);
        pnVerA.add(gridA1, gridBagConstraints);

        gridA2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        gridA2.setMaximumSize(new java.awt.Dimension(56, 70));
        gridA2.setMinimumSize(new java.awt.Dimension(56, 70));
        gridA2.setPreferredSize(new java.awt.Dimension(56, 70));
        gridA2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gridA0MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout gridA2Layout = new javax.swing.GroupLayout(gridA2);
        gridA2.setLayout(gridA2Layout);
        gridA2Layout.setHorizontalGroup(
            gridA2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
        );
        gridA2Layout.setVerticalGroup(
            gridA2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 68, Short.MAX_VALUE)
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 2, 3);
        pnVerA.add(gridA2, gridBagConstraints);

        gridA3.setMaximumSize(new java.awt.Dimension(56, 70));
        gridA3.setMinimumSize(new java.awt.Dimension(56, 70));
        gridA3.setPreferredSize(new java.awt.Dimension(56, 70));
        gridA3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gridA0MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout gridA3Layout = new javax.swing.GroupLayout(gridA3);
        gridA3.setLayout(gridA3Layout);
        gridA3Layout.setHorizontalGroup(
            gridA3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
        );
        gridA3Layout.setVerticalGroup(
            gridA3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 68, Short.MAX_VALUE)
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 2, 3);
        pnVerA.add(gridA3, gridBagConstraints);

        gridA4.setMaximumSize(new java.awt.Dimension(56, 70));
        gridA4.setMinimumSize(new java.awt.Dimension(56, 70));
        gridA4.setPreferredSize(new java.awt.Dimension(56, 70));
        gridA4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gridA0MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout gridA4Layout = new javax.swing.GroupLayout(gridA4);
        gridA4.setLayout(gridA4Layout);
        gridA4Layout.setHorizontalGroup(
            gridA4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
        );
        gridA4Layout.setVerticalGroup(
            gridA4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 68, Short.MAX_VALUE)
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 2, 3);
        pnVerA.add(gridA4, gridBagConstraints);

        gridA5.setMaximumSize(new java.awt.Dimension(56, 70));
        gridA5.setMinimumSize(new java.awt.Dimension(56, 70));
        gridA5.setPreferredSize(new java.awt.Dimension(56, 70));
        gridA5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gridA0MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout gridA5Layout = new javax.swing.GroupLayout(gridA5);
        gridA5.setLayout(gridA5Layout);
        gridA5Layout.setHorizontalGroup(
            gridA5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
        );
        gridA5Layout.setVerticalGroup(
            gridA5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 68, Short.MAX_VALUE)
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 2, 3);
        pnVerA.add(gridA5, gridBagConstraints);

        gridA6.setMaximumSize(new java.awt.Dimension(56, 70));
        gridA6.setMinimumSize(new java.awt.Dimension(56, 70));
        gridA6.setPreferredSize(new java.awt.Dimension(56, 70));
        gridA6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gridA0MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout gridA6Layout = new javax.swing.GroupLayout(gridA6);
        gridA6.setLayout(gridA6Layout);
        gridA6Layout.setHorizontalGroup(
            gridA6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
        );
        gridA6Layout.setVerticalGroup(
            gridA6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 68, Short.MAX_VALUE)
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 2, 3);
        pnVerA.add(gridA6, gridBagConstraints);

        gridA7.setMaximumSize(new java.awt.Dimension(56, 70));
        gridA7.setMinimumSize(new java.awt.Dimension(56, 70));
        gridA7.setPreferredSize(new java.awt.Dimension(56, 70));
        gridA7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gridA0MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout gridA7Layout = new javax.swing.GroupLayout(gridA7);
        gridA7.setLayout(gridA7Layout);
        gridA7Layout.setHorizontalGroup(
            gridA7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
        );
        gridA7Layout.setVerticalGroup(
            gridA7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 68, Short.MAX_VALUE)
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 2, 3);
        pnVerA.add(gridA7, gridBagConstraints);

        gridA8.setMaximumSize(new java.awt.Dimension(56, 70));
        gridA8.setMinimumSize(new java.awt.Dimension(56, 70));
        gridA8.setPreferredSize(new java.awt.Dimension(56, 70));
        gridA8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gridA0MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout gridA8Layout = new javax.swing.GroupLayout(gridA8);
        gridA8.setLayout(gridA8Layout);
        gridA8Layout.setHorizontalGroup(
            gridA8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
        );
        gridA8Layout.setVerticalGroup(
            gridA8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 68, Short.MAX_VALUE)
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 2, 3);
        pnVerA.add(gridA8, gridBagConstraints);

        gridA9.setMaximumSize(new java.awt.Dimension(56, 70));
        gridA9.setMinimumSize(new java.awt.Dimension(56, 70));
        gridA9.setPreferredSize(new java.awt.Dimension(56, 70));
        gridA9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gridA0MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout gridA9Layout = new javax.swing.GroupLayout(gridA9);
        gridA9.setLayout(gridA9Layout);
        gridA9Layout.setHorizontalGroup(
            gridA9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
        );
        gridA9Layout.setVerticalGroup(
            gridA9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 68, Short.MAX_VALUE)
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 2, 3);
        pnVerA.add(gridA9, gridBagConstraints);

        cbA0.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbA0.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnVerA.add(cbA0, gridBagConstraints);

        cbA1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbA1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnVerA.add(cbA1, gridBagConstraints);

        cbA2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbA2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnVerA.add(cbA2, gridBagConstraints);

        cbA3.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbA3.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnVerA.add(cbA3, gridBagConstraints);

        cbA4.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbA4.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnVerA.add(cbA4, gridBagConstraints);

        cbA5.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbA5.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnVerA.add(cbA5, gridBagConstraints);

        cbA6.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbA6.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnVerA.add(cbA6, gridBagConstraints);

        cbA7.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbA7.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnVerA.add(cbA7, gridBagConstraints);

        cbA8.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbA8.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnVerA.add(cbA8, gridBagConstraints);

        cbA9.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbA9.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnVerA.add(cbA9, gridBagConstraints);

        pnVerAButtons.setLayout(new java.awt.BorderLayout(0, 4));

        btSelectAllA.setText("All");
        btSelectAllA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSelectAllAActionPerformed(evt);
            }
        });

        pnVerAButtons.add(btSelectAllA, java.awt.BorderLayout.CENTER);

        btSelectNoneA.setText("None");
        btSelectNoneA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSelectNoneAActionPerformed(evt);
            }
        });

        pnVerAButtons.add(btSelectNoneA, java.awt.BorderLayout.SOUTH);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 2, 3);
        pnVerA.add(pnVerAButtons, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(pnVerA, gridBagConstraints);

        pnVerB.setLayout(new java.awt.GridBagLayout());

        pnVerB.setBorder(javax.swing.BorderFactory.createTitledBorder("Patterns Version B"));
        gridB0.setMaximumSize(new java.awt.Dimension(56, 70));
        gridB0.setMinimumSize(new java.awt.Dimension(56, 70));
        gridB0.setPreferredSize(new java.awt.Dimension(56, 70));
        gridB0.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gridA0MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout gridB0Layout = new javax.swing.GroupLayout(gridB0);
        gridB0.setLayout(gridB0Layout);
        gridB0Layout.setHorizontalGroup(
            gridB0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
        );
        gridB0Layout.setVerticalGroup(
            gridB0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 68, Short.MAX_VALUE)
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 2, 3);
        pnVerB.add(gridB0, gridBagConstraints);

        gridB1.setMaximumSize(new java.awt.Dimension(56, 70));
        gridB1.setMinimumSize(new java.awt.Dimension(56, 70));
        gridB1.setPreferredSize(new java.awt.Dimension(56, 70));
        gridB1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gridA0MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout gridB1Layout = new javax.swing.GroupLayout(gridB1);
        gridB1.setLayout(gridB1Layout);
        gridB1Layout.setHorizontalGroup(
            gridB1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
        );
        gridB1Layout.setVerticalGroup(
            gridB1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 68, Short.MAX_VALUE)
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 2, 3);
        pnVerB.add(gridB1, gridBagConstraints);

        gridB2.setMaximumSize(new java.awt.Dimension(56, 70));
        gridB2.setMinimumSize(new java.awt.Dimension(56, 70));
        gridB2.setPreferredSize(new java.awt.Dimension(56, 70));
        gridB2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gridA0MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout gridB2Layout = new javax.swing.GroupLayout(gridB2);
        gridB2.setLayout(gridB2Layout);
        gridB2Layout.setHorizontalGroup(
            gridB2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
        );
        gridB2Layout.setVerticalGroup(
            gridB2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 68, Short.MAX_VALUE)
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 2, 3);
        pnVerB.add(gridB2, gridBagConstraints);

        gridB3.setMaximumSize(new java.awt.Dimension(56, 70));
        gridB3.setMinimumSize(new java.awt.Dimension(56, 70));
        gridB3.setPreferredSize(new java.awt.Dimension(56, 70));
        gridB3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gridA0MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout gridB3Layout = new javax.swing.GroupLayout(gridB3);
        gridB3.setLayout(gridB3Layout);
        gridB3Layout.setHorizontalGroup(
            gridB3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
        );
        gridB3Layout.setVerticalGroup(
            gridB3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 68, Short.MAX_VALUE)
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 2, 3);
        pnVerB.add(gridB3, gridBagConstraints);

        gridB4.setMaximumSize(new java.awt.Dimension(56, 70));
        gridB4.setMinimumSize(new java.awt.Dimension(56, 70));
        gridB4.setPreferredSize(new java.awt.Dimension(56, 70));
        gridB4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gridA0MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout gridB4Layout = new javax.swing.GroupLayout(gridB4);
        gridB4.setLayout(gridB4Layout);
        gridB4Layout.setHorizontalGroup(
            gridB4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
        );
        gridB4Layout.setVerticalGroup(
            gridB4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 68, Short.MAX_VALUE)
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 2, 3);
        pnVerB.add(gridB4, gridBagConstraints);

        gridB5.setMaximumSize(new java.awt.Dimension(56, 70));
        gridB5.setMinimumSize(new java.awt.Dimension(56, 70));
        gridB5.setPreferredSize(new java.awt.Dimension(56, 70));
        gridB5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gridA0MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout gridB5Layout = new javax.swing.GroupLayout(gridB5);
        gridB5.setLayout(gridB5Layout);
        gridB5Layout.setHorizontalGroup(
            gridB5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
        );
        gridB5Layout.setVerticalGroup(
            gridB5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 68, Short.MAX_VALUE)
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 2, 3);
        pnVerB.add(gridB5, gridBagConstraints);

        gridB6.setMaximumSize(new java.awt.Dimension(56, 70));
        gridB6.setMinimumSize(new java.awt.Dimension(56, 70));
        gridB6.setPreferredSize(new java.awt.Dimension(56, 70));
        gridB6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gridA0MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout gridB6Layout = new javax.swing.GroupLayout(gridB6);
        gridB6.setLayout(gridB6Layout);
        gridB6Layout.setHorizontalGroup(
            gridB6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
        );
        gridB6Layout.setVerticalGroup(
            gridB6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 68, Short.MAX_VALUE)
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 2, 3);
        pnVerB.add(gridB6, gridBagConstraints);

        gridB7.setMaximumSize(new java.awt.Dimension(56, 70));
        gridB7.setMinimumSize(new java.awt.Dimension(56, 70));
        gridB7.setPreferredSize(new java.awt.Dimension(56, 70));
        gridB7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gridA0MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout gridB7Layout = new javax.swing.GroupLayout(gridB7);
        gridB7.setLayout(gridB7Layout);
        gridB7Layout.setHorizontalGroup(
            gridB7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
        );
        gridB7Layout.setVerticalGroup(
            gridB7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 68, Short.MAX_VALUE)
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 2, 3);
        pnVerB.add(gridB7, gridBagConstraints);

        gridB8.setMaximumSize(new java.awt.Dimension(56, 70));
        gridB8.setMinimumSize(new java.awt.Dimension(56, 70));
        gridB8.setPreferredSize(new java.awt.Dimension(56, 70));
        gridB8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gridA0MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout gridB8Layout = new javax.swing.GroupLayout(gridB8);
        gridB8.setLayout(gridB8Layout);
        gridB8Layout.setHorizontalGroup(
            gridB8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
        );
        gridB8Layout.setVerticalGroup(
            gridB8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 68, Short.MAX_VALUE)
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 2, 3);
        pnVerB.add(gridB8, gridBagConstraints);

        gridB9.setMaximumSize(new java.awt.Dimension(56, 70));
        gridB9.setMinimumSize(new java.awt.Dimension(56, 70));
        gridB9.setPreferredSize(new java.awt.Dimension(56, 70));
        gridB9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gridA0MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout gridB9Layout = new javax.swing.GroupLayout(gridB9);
        gridB9.setLayout(gridB9Layout);
        gridB9Layout.setHorizontalGroup(
            gridB9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
        );
        gridB9Layout.setVerticalGroup(
            gridB9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 68, Short.MAX_VALUE)
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 2, 3);
        pnVerB.add(gridB9, gridBagConstraints);

        cbB0.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbB0.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnVerB.add(cbB0, gridBagConstraints);

        cbB1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbB1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnVerB.add(cbB1, gridBagConstraints);

        cbB2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbB2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnVerB.add(cbB2, gridBagConstraints);

        cbB3.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbB3.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnVerB.add(cbB3, gridBagConstraints);

        cbB4.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbB4.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnVerB.add(cbB4, gridBagConstraints);

        cbB5.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbB5.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnVerB.add(cbB5, gridBagConstraints);

        cbB6.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbB6.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnVerB.add(cbB6, gridBagConstraints);

        cbB7.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbB7.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnVerB.add(cbB7, gridBagConstraints);

        cbB8.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbB8.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnVerB.add(cbB8, gridBagConstraints);

        cbB9.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbB9.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnVerB.add(cbB9, gridBagConstraints);

        pnVerBButtons.setLayout(new java.awt.BorderLayout(0, 4));

        btSelectAllB.setText("All");
        btSelectAllB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSelectAllBActionPerformed(evt);
            }
        });

        pnVerBButtons.add(btSelectAllB, java.awt.BorderLayout.CENTER);

        btSelectNoneB.setText("None");
        btSelectNoneB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSelectNoneBActionPerformed(evt);
            }
        });

        pnVerBButtons.add(btSelectNoneB, java.awt.BorderLayout.SOUTH);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 2, 3);
        pnVerB.add(pnVerBButtons, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(pnVerB, gridBagConstraints);

        pnTrainPatterns.setLayout(new java.awt.GridBagLayout());

        pnTrainPatterns.setBorder(javax.swing.BorderFactory.createTitledBorder("Train Selected Patterns"));
        spMaxLabel.setText("Maximum Iterations");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnTrainPatterns.add(spMaxLabel, gridBagConstraints);

        spMax.setFont(getFont());
        spMax.setModel(new SpinnerNumberModel(2000, 1, 99000, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnTrainPatterns.add(spMax, gridBagConstraints);

        cbHiddenLabel.setText("Hidden Layers");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnTrainPatterns.add(cbHiddenLabel, gridBagConstraints);

        cbHidden.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "25", "50", "100" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnTrainPatterns.add(cbHidden, gridBagConstraints);

        cbLearnRateLabel.setText("Learning Constant");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnTrainPatterns.add(cbLearnRateLabel, gridBagConstraints);

        cbLearnRate.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0.1", "0.3", "0.5", "0.7", "0.9" }));
        cbLearnRate.setSelectedIndex(2);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnTrainPatterns.add(cbLearnRate, gridBagConstraints);

        btTrain.setText("Train");
        btTrain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btTrainActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnTrainPatterns.add(btTrain, gridBagConstraints);

        btTrainStop.setText("Stop");
        btTrainStop.setEnabled(false);
        btTrainStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btTrainStopActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnTrainPatterns.add(btTrainStop, gridBagConstraints);

        lbIter.setText("Iteration");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnTrainPatterns.add(lbIter, gridBagConstraints);

        pbIter.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnTrainPatterns.add(pbIter, gridBagConstraints);

        lbTrain.setText("Patterns");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnTrainPatterns.add(lbTrain, gridBagConstraints);

        lbErr.setText("Error");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnTrainPatterns.add(lbErr, gridBagConstraints);

        lbTime.setText("Time (ms)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnTrainPatterns.add(lbTime, gridBagConstraints);

        iterLabel.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnTrainPatterns.add(iterLabel, gridBagConstraints);

        patternsLabel.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnTrainPatterns.add(patternsLabel, gridBagConstraints);

        errorLabel.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnTrainPatterns.add(errorLabel, gridBagConstraints);

        timeLabel.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnTrainPatterns.add(timeLabel, gridBagConstraints);

        jLabel1.setText(":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnTrainPatterns.add(jLabel1, gridBagConstraints);

        jLabel2.setText(":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnTrainPatterns.add(jLabel2, gridBagConstraints);

        jLabel3.setText(":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnTrainPatterns.add(jLabel3, gridBagConstraints);

        jLabel4.setText(":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnTrainPatterns.add(jLabel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(pnTrainPatterns, gridBagConstraints);

        pnInputPattern.setLayout(new java.awt.GridBagLayout());

        pnInputPattern.setBorder(javax.swing.BorderFactory.createTitledBorder("Input Pattern"));
        inputGrid.setEditable(true);
        inputGrid.setMaximumSize(new java.awt.Dimension(160, 200));
        inputGrid.setMinimumSize(new java.awt.Dimension(160, 200));
        inputGrid.setPreferredSize(new java.awt.Dimension(160, 200));
        javax.swing.GroupLayout inputGridLayout = new javax.swing.GroupLayout(inputGrid);
        inputGrid.setLayout(inputGridLayout);
        inputGridLayout.setHorizontalGroup(
            inputGridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 158, Short.MAX_VALUE)
        );
        inputGridLayout.setVerticalGroup(
            inputGridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 198, Short.MAX_VALUE)
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnInputPattern.add(inputGrid, gridBagConstraints);

        noiseLabel.setText("Noise (%)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnInputPattern.add(noiseLabel, gridBagConstraints);

        cbNoise.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "5", "10", "15", "20", "25", "30", "35", "40", "45", "50", "60", "70", "80", "90", "100" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnInputPattern.add(cbNoise, gridBagConstraints);

        btAddNoise.setText("Add Noise");
        btAddNoise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddNoiseActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnInputPattern.add(btAddNoise, gridBagConstraints);

        btRecall.setText("Recall");
        btRecall.setEnabled(false);
        btRecall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRecallActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnInputPattern.add(btRecall, gridBagConstraints);

        btSave.setText("Save");
        btSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSaveActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnInputPattern.add(btSave, gridBagConstraints);

        btClearGrid.setText("Clear");
        btClearGrid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btClearGridActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnInputPattern.add(btClearGrid, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(pnInputPattern, gridBagConstraints);

        pnRecalledPattern.setLayout(new java.awt.GridBagLayout());

        pnRecalledPattern.setBorder(javax.swing.BorderFactory.createTitledBorder("Recalled Pattern"));
        recallGrid.setDotColor(java.awt.Color.magenta);
        recallGrid.setMaximumSize(new java.awt.Dimension(80, 100));
        recallGrid.setMinimumSize(new java.awt.Dimension(80, 100));
        recallGrid.setPreferredSize(new java.awt.Dimension(80, 100));
        javax.swing.GroupLayout recallGridLayout = new javax.swing.GroupLayout(recallGrid);
        recallGrid.setLayout(recallGridLayout);
        recallGridLayout.setHorizontalGroup(
            recallGridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 78, Short.MAX_VALUE)
        );
        recallGridLayout.setVerticalGroup(
            recallGridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 98, Short.MAX_VALUE)
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnRecalledPattern.add(recallGrid, gridBagConstraints);

        btClearGrid2.setText("Clear");
        btClearGrid2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btClearGrid2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnRecalledPattern.add(btClearGrid2, gridBagConstraints);

        statPanel.setLayout(new java.awt.GridBagLayout());

        pbLabelA.setText("A");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        statPanel.add(pbLabelA, gridBagConstraints);

        pbLabelB.setText("B");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        statPanel.add(pbLabelB, gridBagConstraints);

        pbLabel0.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        statPanel.add(pbLabel0, gridBagConstraints);

        pbLabel1.setText("1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        statPanel.add(pbLabel1, gridBagConstraints);

        pbLabel2.setText("2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        statPanel.add(pbLabel2, gridBagConstraints);

        pbLabel3.setText("3");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        statPanel.add(pbLabel3, gridBagConstraints);

        pbLabel4.setText("4");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        statPanel.add(pbLabel4, gridBagConstraints);

        pbLabel5.setText("5");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        statPanel.add(pbLabel5, gridBagConstraints);

        pbLabel6.setText("6");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        statPanel.add(pbLabel6, gridBagConstraints);

        pbLabel7.setText("7");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        statPanel.add(pbLabel7, gridBagConstraints);

        pbLabel8.setText("8");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        statPanel.add(pbLabel8, gridBagConstraints);

        pbLabel9.setText("9");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        statPanel.add(pbLabel9, gridBagConstraints);

        pbA0.setMaximumSize(new java.awt.Dimension(50, 18));
        pbA0.setMinimumSize(new java.awt.Dimension(50, 18));
        pbA0.setPreferredSize(new java.awt.Dimension(50, 18));
        pbA0.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        statPanel.add(pbA0, gridBagConstraints);

        pbA1.setMaximumSize(new java.awt.Dimension(50, 18));
        pbA1.setMinimumSize(new java.awt.Dimension(50, 18));
        pbA1.setPreferredSize(new java.awt.Dimension(50, 18));
        pbA1.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        statPanel.add(pbA1, gridBagConstraints);

        pbA2.setMaximumSize(new java.awt.Dimension(50, 18));
        pbA2.setMinimumSize(new java.awt.Dimension(50, 18));
        pbA2.setPreferredSize(new java.awt.Dimension(50, 18));
        pbA2.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        statPanel.add(pbA2, gridBagConstraints);

        pbA3.setMaximumSize(new java.awt.Dimension(50, 18));
        pbA3.setMinimumSize(new java.awt.Dimension(50, 18));
        pbA3.setPreferredSize(new java.awt.Dimension(50, 18));
        pbA3.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        statPanel.add(pbA3, gridBagConstraints);

        pbA4.setMaximumSize(new java.awt.Dimension(50, 18));
        pbA4.setMinimumSize(new java.awt.Dimension(50, 18));
        pbA4.setPreferredSize(new java.awt.Dimension(50, 18));
        pbA4.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        statPanel.add(pbA4, gridBagConstraints);

        pbA5.setMaximumSize(new java.awt.Dimension(50, 18));
        pbA5.setMinimumSize(new java.awt.Dimension(50, 18));
        pbA5.setPreferredSize(new java.awt.Dimension(50, 18));
        pbA5.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        statPanel.add(pbA5, gridBagConstraints);

        pbA6.setMaximumSize(new java.awt.Dimension(50, 18));
        pbA6.setMinimumSize(new java.awt.Dimension(50, 18));
        pbA6.setPreferredSize(new java.awt.Dimension(50, 18));
        pbA6.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        statPanel.add(pbA6, gridBagConstraints);

        pbA7.setMaximumSize(new java.awt.Dimension(50, 18));
        pbA7.setMinimumSize(new java.awt.Dimension(50, 18));
        pbA7.setPreferredSize(new java.awt.Dimension(50, 18));
        pbA7.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        statPanel.add(pbA7, gridBagConstraints);

        pbA8.setMaximumSize(new java.awt.Dimension(50, 18));
        pbA8.setMinimumSize(new java.awt.Dimension(50, 18));
        pbA8.setPreferredSize(new java.awt.Dimension(50, 18));
        pbA8.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        statPanel.add(pbA8, gridBagConstraints);

        pbA9.setMaximumSize(new java.awt.Dimension(50, 18));
        pbA9.setMinimumSize(new java.awt.Dimension(50, 18));
        pbA9.setPreferredSize(new java.awt.Dimension(50, 18));
        pbA9.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        statPanel.add(pbA9, gridBagConstraints);

        pbB0.setMaximumSize(new java.awt.Dimension(50, 18));
        pbB0.setMinimumSize(new java.awt.Dimension(50, 18));
        pbB0.setPreferredSize(new java.awt.Dimension(50, 18));
        pbB0.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        statPanel.add(pbB0, gridBagConstraints);

        pbB1.setMaximumSize(new java.awt.Dimension(50, 18));
        pbB1.setMinimumSize(new java.awt.Dimension(50, 18));
        pbB1.setPreferredSize(new java.awt.Dimension(50, 18));
        pbB1.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        statPanel.add(pbB1, gridBagConstraints);

        pbB2.setMaximumSize(new java.awt.Dimension(50, 18));
        pbB2.setMinimumSize(new java.awt.Dimension(50, 18));
        pbB2.setPreferredSize(new java.awt.Dimension(50, 18));
        pbB2.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        statPanel.add(pbB2, gridBagConstraints);

        pbB3.setMaximumSize(new java.awt.Dimension(50, 18));
        pbB3.setMinimumSize(new java.awt.Dimension(50, 18));
        pbB3.setPreferredSize(new java.awt.Dimension(50, 18));
        pbB3.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        statPanel.add(pbB3, gridBagConstraints);

        pbB4.setMaximumSize(new java.awt.Dimension(50, 18));
        pbB4.setMinimumSize(new java.awt.Dimension(50, 18));
        pbB4.setPreferredSize(new java.awt.Dimension(50, 18));
        pbB4.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        statPanel.add(pbB4, gridBagConstraints);

        pbB5.setMaximumSize(new java.awt.Dimension(50, 18));
        pbB5.setMinimumSize(new java.awt.Dimension(50, 18));
        pbB5.setPreferredSize(new java.awt.Dimension(50, 18));
        pbB5.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        statPanel.add(pbB5, gridBagConstraints);

        pbB6.setMaximumSize(new java.awt.Dimension(50, 18));
        pbB6.setMinimumSize(new java.awt.Dimension(50, 18));
        pbB6.setPreferredSize(new java.awt.Dimension(50, 18));
        pbB6.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        statPanel.add(pbB6, gridBagConstraints);

        pbB7.setMaximumSize(new java.awt.Dimension(50, 18));
        pbB7.setMinimumSize(new java.awt.Dimension(50, 18));
        pbB7.setPreferredSize(new java.awt.Dimension(50, 18));
        pbB7.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        statPanel.add(pbB7, gridBagConstraints);

        pbB8.setMaximumSize(new java.awt.Dimension(50, 18));
        pbB8.setMinimumSize(new java.awt.Dimension(50, 18));
        pbB8.setPreferredSize(new java.awt.Dimension(50, 18));
        pbB8.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        statPanel.add(pbB8, gridBagConstraints);

        pbB9.setMaximumSize(new java.awt.Dimension(50, 18));
        pbB9.setMinimumSize(new java.awt.Dimension(50, 18));
        pbB9.setPreferredSize(new java.awt.Dimension(50, 18));
        pbB9.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        statPanel.add(pbB9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 12);
        pnRecalledPattern.add(statPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(pnRecalledPattern, gridBagConstraints);

        btDefault.setText("Load Default");
        btDefault.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDefaultActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(btDefault, gridBagConstraints);

        btHelp.setText("Help");
        btHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btHelpActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(btHelp, gridBagConstraints);

        btExit.setText("Exit");
        btExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExitActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(btExit, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void btTrainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btTrainActionPerformed
        try {
            trainer = new Trainer();
            trainer.execute();
        } catch (Exception ex) {
        }
    }//GEN-LAST:event_btTrainActionPerformed
    
    private void btTrainStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btTrainStopActionPerformed
        if (trainer != null)
            trainer.cancel(false);
    }//GEN-LAST:event_btTrainStopActionPerformed
    
    private void btRecallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRecallActionPerformed
        recallGrid.clearPattern();
        
        EMatrix pat = new EMatrix(80,1);
        pat.setColInt(0, inputGrid.getPattern());
        
        pat = WH.transpose().multiply(pat);
        pat = pat.hyperTan();
        pat = WO.transpose().multiply(pat);
        pat = pat.hyperTan();
        
        double[] pat2 = pat.getCol(0);
        double sum = 0.0;
        double max = 0.0;
        int imax = 0;
        for (int i=0; i < pat2.length; i++) {
            sum += pat2[i];
            if (pat2[i] > max) {
                max = pat2[i];
                imax = i;
            }
        }
        
        int k = 0;
        for (int i=0; i<20; i++) {
            if (selectedPatterns[i] == 1) {
                ((JProgressBar) gridBoxes[2][i]).setValue((int)(100D * pat2[k]/sum));
                k++;
            }
        }
        
        recallGrid.setPattern(u.getColInt(imax));
    }//GEN-LAST:event_btRecallActionPerformed
    
    
    private class Trainer extends SwingWorker<Object, Integer> {
        
        public Trainer() throws Exception {
            for (int i=0; i < 20; i++) {
                if (((JCheckBox) gridBoxes[1][i]).isSelected()) {
                    selectedPatterns[i] = 1;
                    ((MGrid) gridBoxes[0][i]).setDotColor(recallGrid.getDotColor());
                    numPatterns++;
                } else {
                    selectedPatterns[i] = 0;
                    ((MGrid) gridBoxes[0][i]).setDotColor(inputGrid.getDotColor());
                }
            }
            if (numPatterns == 0) {
                btRecall.setEnabled(false);
                patternsLabel.setText("0");
                errorLabel.setText("0");
                timeLabel.setText("0");
                iterLabel.setText("0");
                pbIter.setValue(0);
                throw new Exception("Zero patterns selected");
            }
            
            btRecall.setEnabled(false);
            btTrain.setEnabled(false);
            btTrainStop.setEnabled(true);
            
            recallGrid.clearPattern();
            for (int i=0; i<20; i++)
                ((JProgressBar) gridBoxes[2][i]).setValue(0);
            patternsLabel.setText(Integer.toString(numPatterns));
            
            u = new EMatrix(80, numPatterns);
            int k=0;
            for (int i=0; i < 20; i++) {
                if ( ((JCheckBox) gridBoxes[1][i]).isSelected() ) {
                    u.setColInt(k, ((MGrid) gridBoxes[0][i]).getPattern());
                    k++;
                }
            }
        }
        
        protected Object doInBackground() {
            double learningRate = Double.parseDouble(cbLearnRate.getSelectedItem().toString());
            int hiddenLayers = Integer.parseInt(cbHidden.getSelectedItem().toString());
            
            WH = new EMatrix(80,hiddenLayers);
            WH.randomize();
            WO = new EMatrix(hiddenLayers, numPatterns);
            WO.randomize();
            
            for (int i = 1; i <= iter; i++) {
                if (isCancelled()) break;
                
                double [] err = null;
                
                for (int j=0; j < numPatterns; j++) {
                    EMatrix x = new EMatrix(80, 1);
                    x.setCol(0, u.getCol(j));
                    
                    EMatrix ah = WH.transpose().multiply(x);
                    EMatrix xh = ah.hyperTan();
                    EMatrix ao = WO.transpose().multiply(xh);
                    EMatrix xo = ao.hyperTan();
                    EMatrix y = new EMatrix(numPatterns, 1);
                    y.diagonals(j);
                    
                    EMatrix eo = y.minus(xo).multiplySimple(ao.hyperTanDerivative());
                    EMatrix eh = WO.multiply(eo).multiplySimple(ah.hyperTanDerivative());
                    
                    EMatrix er = y.minus(xo);
                    err = er.getCol(0);
                    
                    
                    double[][] WHM = WH.get();
                    double[] xm = x.getCol(0);
                    double[] ehm = eh.getCol(0);
                    
                    for (int a = 0; a < 80; a++)
                        for (int b =0; b < hiddenLayers; b++)
                            WHM [a][b] += learningRate * ehm [b] * xm [a];
                    
                    WH = new EMatrix(WHM);
                    
                    double[][] WOM = WO.get();
                    double[] xhm = xh.getCol(0);
                    double[] eom = eo.getCol(0);
                    
                    for (int a = 0; a < hiddenLayers; a++)
                        for (int b = 0; b < numPatterns; b++)
                            WOM[a][b] += learningRate * eom[b] * xhm[a];
                    
                    WO = new EMatrix(WOM);
                }
                
                for (int t = 0; t < numPatterns; t++)
                    error =+ 0.5D * Math.pow(err[t], 2);
                
                publish(i);
            }
            return null;
        }

        @Override
        protected void process(List<Integer> chunks) {
            int i = chunks.get(chunks.size() - 1);
            
            pbIter.setValue(i * 100  / iter);
            iterLabel.setText(formatter2.format(i));
            timeLabel.setText(formatter2.format(System.currentTimeMillis() - start));
            errorLabel.setText(formatter1.format(error));            
        }
        
        
        protected void done() {
            btRecall.setEnabled(true);
            btTrain.setEnabled(true);
            btTrainStop.setEnabled(false);
        }
        
        private long start = System.currentTimeMillis();
        private int iter = (Integer) spMax.getValue();
        private int numPatterns;
        private double error;
        private DecimalFormat formatter1 = new DecimalFormat("0.000000E0");
        private DecimalFormat formatter2 = new DecimalFormat("0");
    }
    
    private void btDefaultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDefaultActionPerformed
        for (int i=0; i < 20; i++)
            ((MGrid) gridBoxes[0][i]).Default();
    }//GEN-LAST:event_btDefaultActionPerformed
    
    private void btAddNoiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddNoiseActionPerformed
        String ns = (String) cbNoise.getSelectedItem();
        int nc = Integer.parseInt(ns) * 80 / 100;
        
        int [] pattern = inputGrid.getPattern();
        
        int[] r = uRandom.getNumbers(nc, 80);
        for (int i=0; i<nc; i++) {
            pattern[r[i]] = (pattern[r[i]] == -1) ? 1 : -1;
        }
        inputGrid.setPattern(pattern);
    }//GEN-LAST:event_btAddNoiseActionPerformed
    
    private void btSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaveActionPerformed
        for (int i=0; i < 20; i++) {
            if (((JCheckBox) gridBoxes[1][i]).isSelected()) {
                ((MGrid) gridBoxes[0][i]).setPattern(inputGrid.getPattern());
                ((MGrid) gridBoxes[0][i]).setDotColor(inputGrid.getDotColor());
            }
        }
    }//GEN-LAST:event_btSaveActionPerformed
    
    private void gridA0MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gridA0MouseClicked
        inputGrid.setPattern(((MGrid) evt.getSource()).getPattern());
    }//GEN-LAST:event_gridA0MouseClicked
    
    private void btSelectNoneBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSelectNoneBActionPerformed
        int c = pnVerB.getComponentCount();
        for (int i=0; i < c; i++) {
            Component comp = pnVerB.getComponent(i);
            if (comp instanceof  JCheckBox)
                ((JCheckBox) comp).setSelected(false);
        }
    }//GEN-LAST:event_btSelectNoneBActionPerformed
    
    private void btSelectAllBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSelectAllBActionPerformed
        int c = pnVerB.getComponentCount();
        for (int i=0; i < c; i++) {
            Component comp = pnVerB.getComponent(i);
            if (comp instanceof  JCheckBox)
                ((JCheckBox) comp).setSelected(true);
        }
    }//GEN-LAST:event_btSelectAllBActionPerformed
    
    private void btSelectNoneAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSelectNoneAActionPerformed
        int c = pnVerA.getComponentCount();
        for (int i=0; i < c; i++) {
            Component comp = pnVerA.getComponent(i);
            if (comp instanceof  JCheckBox)
                ((JCheckBox) comp).setSelected(false);
        }
    }//GEN-LAST:event_btSelectNoneAActionPerformed
    
    private void btSelectAllAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSelectAllAActionPerformed
        int c = pnVerA.getComponentCount();
        for (int i=0; i < c; i++) {
            Component comp = pnVerA.getComponent(i);
            if (comp instanceof  JCheckBox)
                ((JCheckBox) comp).setSelected(true);
        }
    }//GEN-LAST:event_btSelectAllAActionPerformed
    
    private void btClearGridActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btClearGridActionPerformed
        inputGrid.clearPattern();
    }//GEN-LAST:event_btClearGridActionPerformed
    
    private void btClearGrid2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btClearGrid2ActionPerformed
        recallGrid.clearPattern();
        for (int i=0; i<20; i++)
            ((JProgressBar) gridBoxes[2][i]).setValue(0);
    }//GEN-LAST:event_btClearGrid2ActionPerformed
    
    private void btHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btHelpActionPerformed
        new HelpForm(this).setVisible(true);
    }//GEN-LAST:event_btHelpActionPerformed
    
    private void btExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btExitActionPerformed
    
    public static void main(String args[]) {
        try {
            //UIManager.setLookAndFeel("com.sun.java.swing.plaf.motif.MotifLookAndFeel");
            //UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch(Exception e) {
            System.out.println("Error setting native LAF: " + e);
        }
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }
    
    private JComponent [][] gridBoxes;
    private UniqueRandom uRandom = new UniqueRandom();
    private EMatrix WH;
    private EMatrix WO;
    private EMatrix u;
    private Trainer trainer;
    private int[] selectedPatterns = new int[20];
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAddNoise;
    private javax.swing.JButton btClearGrid;
    private javax.swing.JButton btClearGrid2;
    private javax.swing.JButton btDefault;
    private javax.swing.JButton btExit;
    private javax.swing.JButton btHelp;
    private javax.swing.JButton btRecall;
    private javax.swing.JButton btSave;
    private javax.swing.JButton btSelectAllA;
    private javax.swing.JButton btSelectAllB;
    private javax.swing.JButton btSelectNoneA;
    private javax.swing.JButton btSelectNoneB;
    private javax.swing.JButton btTrain;
    private javax.swing.JButton btTrainStop;
    private javax.swing.JCheckBox cbA0;
    private javax.swing.JCheckBox cbA1;
    private javax.swing.JCheckBox cbA2;
    private javax.swing.JCheckBox cbA3;
    private javax.swing.JCheckBox cbA4;
    private javax.swing.JCheckBox cbA5;
    private javax.swing.JCheckBox cbA6;
    private javax.swing.JCheckBox cbA7;
    private javax.swing.JCheckBox cbA8;
    private javax.swing.JCheckBox cbA9;
    private javax.swing.JCheckBox cbB0;
    private javax.swing.JCheckBox cbB1;
    private javax.swing.JCheckBox cbB2;
    private javax.swing.JCheckBox cbB3;
    private javax.swing.JCheckBox cbB4;
    private javax.swing.JCheckBox cbB5;
    private javax.swing.JCheckBox cbB6;
    private javax.swing.JCheckBox cbB7;
    private javax.swing.JCheckBox cbB8;
    private javax.swing.JCheckBox cbB9;
    private javax.swing.JComboBox cbHidden;
    private javax.swing.JLabel cbHiddenLabel;
    private javax.swing.JComboBox cbLearnRate;
    private javax.swing.JLabel cbLearnRateLabel;
    private javax.swing.JComboBox cbNoise;
    private javax.swing.JLabel errorLabel;
    private hopfield.MGrid gridA0;
    private hopfield.MGrid gridA1;
    private hopfield.MGrid gridA2;
    private hopfield.MGrid gridA3;
    private hopfield.MGrid gridA4;
    private hopfield.MGrid gridA5;
    private hopfield.MGrid gridA6;
    private hopfield.MGrid gridA7;
    private hopfield.MGrid gridA8;
    private hopfield.MGrid gridA9;
    private hopfield.MGrid gridB0;
    private hopfield.MGrid gridB1;
    private hopfield.MGrid gridB2;
    private hopfield.MGrid gridB3;
    private hopfield.MGrid gridB4;
    private hopfield.MGrid gridB5;
    private hopfield.MGrid gridB6;
    private hopfield.MGrid gridB7;
    private hopfield.MGrid gridB8;
    private hopfield.MGrid gridB9;
    private hopfield.MGrid inputGrid;
    private javax.swing.JLabel iterLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lbErr;
    private javax.swing.JLabel lbIter;
    private javax.swing.JLabel lbTime;
    private javax.swing.JLabel lbTrain;
    private javax.swing.JLabel noiseLabel;
    private javax.swing.JLabel patternsLabel;
    private javax.swing.JProgressBar pbA0;
    private javax.swing.JProgressBar pbA1;
    private javax.swing.JProgressBar pbA2;
    private javax.swing.JProgressBar pbA3;
    private javax.swing.JProgressBar pbA4;
    private javax.swing.JProgressBar pbA5;
    private javax.swing.JProgressBar pbA6;
    private javax.swing.JProgressBar pbA7;
    private javax.swing.JProgressBar pbA8;
    private javax.swing.JProgressBar pbA9;
    private javax.swing.JProgressBar pbB0;
    private javax.swing.JProgressBar pbB1;
    private javax.swing.JProgressBar pbB2;
    private javax.swing.JProgressBar pbB3;
    private javax.swing.JProgressBar pbB4;
    private javax.swing.JProgressBar pbB5;
    private javax.swing.JProgressBar pbB6;
    private javax.swing.JProgressBar pbB7;
    private javax.swing.JProgressBar pbB8;
    private javax.swing.JProgressBar pbB9;
    private javax.swing.JProgressBar pbIter;
    private javax.swing.JLabel pbLabel0;
    private javax.swing.JLabel pbLabel1;
    private javax.swing.JLabel pbLabel2;
    private javax.swing.JLabel pbLabel3;
    private javax.swing.JLabel pbLabel4;
    private javax.swing.JLabel pbLabel5;
    private javax.swing.JLabel pbLabel6;
    private javax.swing.JLabel pbLabel7;
    private javax.swing.JLabel pbLabel8;
    private javax.swing.JLabel pbLabel9;
    private javax.swing.JLabel pbLabelA;
    private javax.swing.JLabel pbLabelB;
    private javax.swing.JPanel pnInputPattern;
    private javax.swing.JPanel pnRecalledPattern;
    private javax.swing.JPanel pnTrainPatterns;
    private javax.swing.JPanel pnVerA;
    private javax.swing.JPanel pnVerAButtons;
    private javax.swing.JPanel pnVerB;
    private javax.swing.JPanel pnVerBButtons;
    private hopfield.MGrid recallGrid;
    private javax.swing.JSpinner spMax;
    private javax.swing.JLabel spMaxLabel;
    private javax.swing.JPanel statPanel;
    private javax.swing.JLabel timeLabel;
    // End of variables declaration//GEN-END:variables
    
    
    
}
